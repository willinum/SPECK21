<?xml version="1.0" ?>
<sdf version="1.5">

<model name="velodyne_hdl-32">
  <!-- Give the base link a unique name -->
  <link name="base">

    <!-- Offset the base by half the lenght of the cylinder -->
    <pose>0 0 0.029335 0 0 0</pose>
    <inertial>
      <mass>0.1</mass>
      <inertia>
        <ixx>0.001087473</ixx>
        <iyy>0.001087473</iyy>
        <izz>0.001092437</izz>
        <ixy>0</ixy>
        <ixz>0</ixz>
        <iyz>0</iyz>
      </inertia>
    </inertial>
    <collision name="base_collision">
      <geometry>
        <cylinder>
          <!-- Radius and length provided by Velodyne -->
          <radius>.04267</radius>
          <length>.05867</length>
        </cylinder>
      </geometry>
    </collision>

    <!-- The visual is mostly a copy of the collision -->
    <visual name="base_visual">
      <geometry>
        <cylinder>
          <radius>.04267</radius>
          <length>.05867</length>
        </cylinder>
      </geometry>
    </visual>
  </link>

  <!-- Give the base link a unique name -->
  <link name="top">

    <!-- Vertically offset the top cylinder by the length of the bottom
        cylinder and half the length of this cylinder. -->
    <pose>0 0 0.095455 0 0 0</pose>
   <inertial>
     <mass>0.1</mass>
     <inertia>
       <ixx>0.000090623</ixx>
       <iyy>0.000090623</iyy>
       <izz>0.000091036</izz>
       <ixy>0</ixy>
       <ixz>0</ixz>
       <iyz>0</iyz>
     </inertia>
   </inertial>
    <collision name="top_collision">
      <geometry>
        <cylinder>
          <!-- Radius and length provided by Velodyne -->
          <radius>0.04267</radius>
          <length>0.07357</length>
        </cylinder>
      </geometry>
    </collision>

    <!-- The visual is mostly a copy of the collision -->
    <visual name="top_visual">
      <geometry>
        <cylinder>
          <radius>0.04267</radius>
          <length>0.07357</length>
        </cylinder>
      </geometry>
    </visual>
    
  <!-- Add a ray sensor, and give it a name -->
  <sensor type="ray" name="sensor">
  <!-- Position the ray sensor based on the specification. Also rotate
       it by 90 degrees around the X-axis so that the <horizontal> rays
       become vertical -->
  <pose>0 0 -0.004645 1.5707 0 0</pose>
  <!-- Enable visualization to see the rays in the GUI -->
  <visualize>true</visualize>
  <!-- Set the update rate of the sensor 30 -->
  <update_rate>1</update_rate>
  <always_on>1</always_on>
  <ray>
    <noise>
      <!-- Use gaussian noise -->
      <type>gaussian</type>
      <mean>0.0</mean>
      <stddev>0.02</stddev>
    </noise>
  <!-- The scan element contains the horizontal and vertical beams.
       We are leaving out the vertical beams for this tutorial. -->
  <scan>
    <!-- The horizontal beams -->
    <vertical>
      <!-- The velodyne has 32 beams(samples) -->
      <samples>16</samples>

      <!-- Resolution is multiplied by samples to determine number of
           simulated beams vs interpolated beams. See:
           http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
           -->
      <resolution>1</resolution>

      <!-- Minimum angle in radians -->
      <min_angle>-0.53529248</min_angle>

      <!-- Maximum angle in radians -->
      <max_angle>0.58622663</max_angle>
    </vertical>
  </scan>

  <!-- Range defines characteristics of an individual beam -->
  <range>

    <!-- Minimum distance of the beam -->
    <min>0.05</min>

    <!-- Maximum distance of the beam -->
    <max>70</max>

    <!-- Linear resolution of the beam -->
    <resolution>0.02</resolution>
  </range>
  </ray>
  
 
<!-- Plugin to attach to a gazebo ray or gpu_ray sensor and publish its data to ROS
/**
  \details
  SDF parameters:
  \verbatim
  <output_type>: Optional. The message type of the plugin's output. Can be any of the following:
    * sensor_msgs/PointCloud2: 3D cloud of points, Default
    * sensor_msgs/PointCloud:  3D cloud of points
    * sensor_msgs/LaserScan:   2D scan, uses center vertical ray if there are multiple
    * sensor_msgs/Range:       Single distance value, minimum of all ray ranges of parent sensor
  \endverbatim
  \verbatim
  <frame_name>: TF Frame id of output header.
               If not set, frame id will be name of sensor's parent link
  \endverbatim
  \verbatim
  <min_intensity>: Clip intensity values for output to this value.
                  Default: 0.0
  \endverbatim
  \verbatim
  <radiation_type>: The radiation type to publish when the output type is sensor_msgs/Range.
                   Can be either "infrared" or "ultrasonic".
                   Default: "infrared".
  \endverbatim -->
   <plugin name="my_ray_sensor_plugin" filename="libgazebo_ros_ray_sensor.so">
      <ros>
        <!-- Configure namespace and remap to publish to /ray/pointcloud2 -->
        <namespace>/ray</namespace>
        <remapping>~/out:=range</remapping>
      </ros>
      <!-- Output as a PointCloud2, see above for other types -->
      <output_type>sensor_msgs/Range</output_type>
      <!-- Clip intensity values so all are above 100, optional -->
      <min_intensity>100.0</min_intensity>
      <!-- Frame id for header of output, defaults to sensor's parent link name -->
       <frame_name>ray_link</frame_name>   <!-- -->
 </plugin> 
 
 </sensor>	   
  </link> 
  
<!-- Each joint must have a unique name -->
<joint type="revolute" name="joint">

  <!-- Position the joint at the bottom of the top link -->
  <pose>0 0 -0.036785 0 0 0</pose>
  <!-- Use the base link as the parent of the joint -->
  <parent>base</parent>
  <!-- Use the top link as the child of the joint -->
  <child>top</child>
  <!-- The axis defines the joint's degree of freedom -->
  <axis>
    <!-- Revolve around the z-axis -->
    <xyz>0 0 1</xyz>
    <!-- Limit refers to the range of motion of the joint -->
    <limit>
      <!-- Use a very large number to indicate a continuous revolution -->
      <lower>-0000000000000000</lower>
      <upper>0000000000000000</upper>
    </limit>
  </axis>
</joint> 
</model>
</sdf>
